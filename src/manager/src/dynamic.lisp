(in-package :manager)

(defclass+ dynamic-application+ (dynamic-class+ http-application+)
  ())

;; -------------------------------------------------------------------------
;; Applications Generated by Manager
;; -------------------------------------------------------------------------
(defclass+ dynamic-application (web-application persistent-application)
  ()
  (:metaclass dynamic-application+)
  (:default-initargs :database-directory nil))

(defprint-object (self dynamic-application :identity t)
  (format t "~A" (web-application.fqdn self)))

(defparameter +superclasses+ '(http-application database-server))
(defmethod dynamic-application.superclasses ((self dynamic-application))
  (reduce0 (lambda (acc atom)
	     (if (member (class-name atom) +superclasses+)
		 (cons (symbol->js (class-name atom)) acc)
		 acc))
	   (reverse (class+.superclasses (class-of self)))))

(defmethod core-server::database.directory ((application dynamic-application))
  (ensure-directories-exist
   (merge-pathnames
    (make-pathname :directory (list :relative "var"
				    (web-application.fqdn application) "db"))
    (bootstrap::home))))

(defcrud dynamic-application)
(defmethod dynamic-application.find-class ((self persistent-server) class)
  (find-class (find class +superclasses+ :key #'symbol->js :test #'equal)))

(deftransaction dynamic-application.change-class ((self persistent-server)
						  (instance dynamic-application)
						  new-superclasses)
  (let* ((supers (cons (find-class 'dynamic-application)
		       (mapcar (curry #'dynamic-application.find-class self)
			       new-superclasses)))
	 ;; (args (reduce0 (lambda (acc slot)
	 ;; 		  (core-server::with-slotdef (initarg name) slot
	 ;; 		    (cons initarg
	 ;; 			  (cons (slot-value instance name) acc))))
	 ;; 		(reverse (class+.local-slots (class-of instance)))))
	 (metaclass (find-class 'dynamic-application+)))
    (unregister self instance)
    (stop instance)
    (change-class instance (make-instance metaclass
					  :name 'dynamic-application
					  :direct-superclasses supers))    
    (start instance)
    (register self instance)))
